{"version":3,"sources":["assets/icon-search.svg","components/InputBar.tsx","components/InfoDisplayHeader.tsx","components/InfoDisplayBody.tsx","components/InfoDisplayBottom.tsx","components/InfoDisplay.tsx","assets/icon-moon.svg","assets/icon-sun.svg","components/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputBar","setUsername","isDarkMode","useForm","register","handleSubmit","reset","formState","errors","useState","isFocus","setIsFocus","isBlur","setIsBlur","changeOpacity","btn","document","querySelector","classList","contains","remove","add","onSubmit","userInput","console","log","userSearch","className","onMouseEnter","onMouseLeave","src","searchIcon","alt","type","placeholder","onFocus","onBlur","autoFocus","InfoDisplayHeader","login","avatar_url","name","created_at","dateStr","slice","indexOf","split","year","month","day","parseInt","parseDate","InfoDisplayBody","bio","public_repos","followers","following","InfoDisplayBottom","location","blog","twitter_username","company","href","target","rel","length","InfoDisplay","username","useAxios","data","loading","error","Header","setDarkMode","onClick","sun","moon","App","useEffect","body","toggle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.70bdb12d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon-search.0cc0c984.svg\";","import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport searchIcon from \"../assets/icon-search.svg\";\nimport \"./InputBar.css\";\n\n// TODO:\n// Add error message when search fails\n\n// * Type declarations\ntype Input = {\n  userSearch: string;\n};\n\ntype InputBarProps = {\n  setUsername: (username: string) => void;\n  isDarkMode: boolean;\n};\n\nexport default function InputBar({ setUsername, isDarkMode }: InputBarProps) {\n  // * Hooks\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<Input>();\n  const [isFocus, setIsFocus] = useState(true);\n  const [isBlur, setIsBlur] = useState(false);\n\n  const onSubmit = (userInput: Input) => {\n    // TODO: Remove (debug)\n    console.log(userInput);\n\n    setUsername(userInput.userSearch);\n    reset();\n  };\n\n  const changeOpacity = () => {\n    const btn = document.querySelector(\"button\");\n\n    if (btn?.classList.contains(\"opaque\") && isBlur) {\n      btn?.classList.remove(\"opaque\");\n    } else {\n      btn?.classList.add(\"opaque\");\n    }\n  };\n\n  const handleFocus = () => {\n    setIsFocus(true);\n    setIsBlur(false);\n  };\n\n  const handleBlur = () => {\n    setIsFocus(false);\n    setIsBlur(true);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div className={`Input-container ${isDarkMode && \"semi-dark\"}`}>\n        <div\n          className=\"Input-search-container\"\n          onMouseEnter={changeOpacity}\n          onMouseLeave={changeOpacity}\n        >\n          <img src={searchIcon} alt=\"magnifying glass\" />\n          {/* TODO: Add error message when search fails */}\n          <input\n            className={`${isDarkMode && \"semi-dark\"}`}\n            type=\"text\"\n            {...register(\"userSearch\")}\n            placeholder=\"Search GitHub usernameâ€¦\"\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            autoFocus\n          />\n        </div>\n        <button type=\"submit\" className={isFocus ? \"opaque\" : \"\"}>\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n","import React from \"react\";\nimport \"./InfoDisplayHeader.css\";\n\ntype InfoDisplayHeaderProps = {\n  login?: string;\n  avatar_url: string;\n  name?: string;\n  created_at: string;\n  isDarkMode: boolean;\n};\n\nexport default function InfoDisplayHeader({\n  login,\n  avatar_url,\n  name,\n  created_at,\n  isDarkMode,\n}: InfoDisplayHeaderProps) {\n  const parseDate = (dateStr: string) => {\n    if (!dateStr) return \"Not Available\";\n\n    const months: string[] = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    let [year, month, day]: string[] = dateStr\n      .slice(0, dateStr.indexOf(\"T\"))\n      .split(\"-\");\n    month = months[parseInt(month) - 1];\n    return `${day} ${month} ${year}`;\n  };\n\n  return (\n    <header className=\"InfoDisplayHeader\">\n      <div className=\"InfoDisplayHeader-col-1\">\n        <img className=\"InfoDisplayHeader-img\" src={avatar_url} alt=\"\" />\n      </div>\n      <div className=\"InfoDisplayHeader-col-2\">\n        <div className=\"InfoDisplayHeader-col-2-sub-col-1\">\n          <h1 className=\"InfoDisplayHeader-name\">{name ? name : login}</h1>\n          <h3 className=\"InfoDisplayHeader-login\">@{login}</h3>\n        </div>\n        <div className=\"InfoDisplayHeader-col-2-sub-col-2\">\n          <p className={`InfoDisplayHeader-date ${isDarkMode && \"semi-dark\"}`}>\n            Joined {parseDate(created_at!)}\n          </p>\n        </div>\n      </div>\n    </header>\n  );\n}\n","import \"./InfoDisplayBody.css\";\n\ntype InfoDisplayBodyProps = {\n  bio?: string;\n  public_repos: number;\n  followers: number;\n  following: number;\n  isDarkMode: boolean;\n};\n\n/**\n * Note: This should probably be split into two components,\n * but since I'm not reusing these components, I'm just going to leave\n * it as one component.\n **/\nexport default function InfoDisplayBody({\n  bio,\n  public_repos,\n  followers,\n  following,\n  isDarkMode,\n}: InfoDisplayBodyProps) {\n  return (\n    <div className=\"InfoDisplayBody\">\n      <div className=\"InfoDisplayBody-bio\">\n        {bio ? (\n          <p>{bio}</p>\n        ) : (\n          <p className=\"transparent\">This profile has no bio</p>\n        )}\n      </div>\n\n      <div className={`InfoDisplayBody-stat-block && ${isDarkMode && \"dark\"}`}>\n        <div className=\"InfoDisplayBody-columns\">\n          <div className=\"col-1\">\n            <div className=\"stat-block-title\">\n              <h4>Repos</h4>\n            </div>\n            <div className=\"stat-block-value\">\n              <h2>{public_repos}</h2>\n            </div>\n          </div>\n\n          <div className=\"col-2\">\n            <div className=\"stat-block-title\">\n              <h4>Followers</h4>\n            </div>\n            <div className=\"stat-block-value\">\n              <h2>{followers}</h2>\n            </div>\n          </div>\n\n          <div className=\"col-3\">\n            <div className=\"stat-block-title\">\n              <h4>Following</h4>\n            </div>\n            <div className=\"stat-block-value\">\n              <h2>{following}</h2>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import \"../assets/icons.css\";\nimport \"./InfoDisplayBottom.css\";\n\ntype InfoDisplayBottomProps = {\n  location?: string;\n  blog?: string;\n  twitter_username?: string;\n  company?: string;\n  isDarkMode: boolean;\n};\n\nexport default function InfoDisplayBottom({\n  location,\n  blog,\n  twitter_username,\n  company,\n  isDarkMode,\n}: InfoDisplayBottomProps) {\n  return (\n    <div className=\"InfoDisplayBottom\">\n      {/* TODO: Maybe this does need a refactor after all? */}\n      {/*\n        These \"lines\" could all refactored into their own components,\n        but the simplicity of this project, plus the need to consider\n        multiple veiwports makes doing so more difficult than necessary, \n        I think.\n      */}\n      <div className=\"InfoDisplayBottom-col-1\">\n        <div\n          className={`InfoDisplayBottom-line ${location ? \"\" : \"transparent\"}`}\n        >\n          {/* <img className=\"location\" src={iconLocation} alt=\"\" /> */}\n          <div className={`icon loc-icon ${isDarkMode && \"icon-dark\"}`}></div>\n          <p>{location ? location : \"Not Available\"}</p>\n        </div>\n\n        <a\n          className={`InfoDisplayBottom-link ${isDarkMode && \"semi-dark\"}  ${\n            blog ? \"\" : \"inactive\"\n          }`}\n          href={`http://${blog}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <div\n            className={`InfoDisplayBottom-line ${blog ? \"\" : \"transparent\"}`}\n          >\n            {/* <img src={iconWebsite} alt=\"\" /> */}\n            <div\n              className={`icon link-icon ${isDarkMode && \"icon-dark\"}`}\n            ></div>\n            <p>{blog ? blog : \"Not Available\"}</p>\n          </div>\n        </a>\n      </div>\n\n      <div className=\"InfoDisplayBottom-col-2\">\n        <a\n          className={`InfoDisplayBottom-link ${isDarkMode && \"semi-dark\"} ${\n            twitter_username ? \"\" : \"inactive\"\n          }`}\n          href={`https://twitter.com/${twitter_username}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <div\n            className={`InfoDisplayBottom-line ${\n              twitter_username ? \"\" : \"transparent\"\n            }`}\n          >\n            {/* <img src={iconTwitter} alt=\"\" /> */}\n            <div\n              className={`icon twitter-icon ${isDarkMode && \"icon-dark\"}`}\n            ></div>\n            <p>{twitter_username ? twitter_username : \"Not Available\"}</p>\n          </div>\n        </a>\n\n        <a\n          className={`InfoDisplayBottom-link ${isDarkMode && \"semi-dark\"} ${\n            company ? \"\" : \"inactive\"\n          }`}\n          href={`https://github.com/${company?.slice(1, company.length)}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <div\n            className={`InfoDisplayBottom-line ${company ? \"\" : \"transparent\"}`}\n          >\n            {/* <img src={iconCompany} alt=\"\" /> */}\n            <div\n              className={`icon company-icon ${isDarkMode && \"icon-dark\"}`}\n            ></div>\n            <p>{company ? company : \"Not Available\"}</p>\n          </div>\n        </a>\n      </div>\n    </div>\n  );\n}\n","import useAxios from \"axios-hooks\";\nimport InfoDisplayHeader from \"./InfoDisplayHeader\";\nimport InfoDisplayBody from \"./InfoDisplayBody\";\nimport InfoDisplayBottom from \"./InfoDisplayBottom\";\nimport \"./InfoDisplay.css\";\n\n// * Constants\nconst URL = \"https://api.github.com/users/\";\n\n// * Type Declarations\ntype InfoDisplayProps = {\n  username: string;\n  isDarkMode: boolean;\n};\n\nexport default function InfoDisplay({\n  username,\n  isDarkMode,\n}: InfoDisplayProps) {\n  // * Hooks\n  const [{ data, loading, error }] = useAxios(`${URL}${username}`);\n\n  // * API States\n  // TODO: Improve these\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error!</p>;\n\n  return (\n    <div className={`InfoDisplay ${isDarkMode && \"semi-dark\"}`}>\n      <InfoDisplayHeader\n        name={data[\"name\"]}\n        login={data[\"login\"]}\n        created_at={data[\"created_at\"]}\n        avatar_url={data[\"avatar_url\"]}\n        isDarkMode={isDarkMode}\n      />\n\n      <div className=\"InfoDisplay-desktop-helper\">\n        <InfoDisplayBody\n          bio={data[\"bio\"]}\n          public_repos={data[\"public_repos\"]}\n          followers={data[\"followers\"]}\n          following={data[\"following\"]}\n          isDarkMode={isDarkMode}\n        />\n        <InfoDisplayBottom\n          location={data[\"location\"]}\n          blog={data[\"blog\"]}\n          twitter_username={data[\"twitter_username\"]}\n          company={data[\"company\"]}\n          isDarkMode={isDarkMode}\n        />\n      </div>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/icon-moon.cce754ce.svg\";","export default __webpack_public_path__ + \"static/media/icon-sun.f28a8996.svg\";","import moon from \"../assets/icon-moon.svg\";\nimport sun from \"../assets/icon-sun.svg\";\nimport \"./Header.css\";\n\ntype HeaderProps = {\n  isDarkMode: boolean;\n  setDarkMode: (isDarkMode: boolean) => void;\n};\n\nexport default function Header({ isDarkMode, setDarkMode }: HeaderProps) {\n  return (\n    <header className=\"Header\">\n      <h1 className={`Header-title ${isDarkMode && \"dark\"}`}>devfinder</h1>\n      <div\n        className={`Header-toggle ${isDarkMode && \"reverse-trans-effect\"}`}\n        onClick={() => setDarkMode(!isDarkMode)}\n      >\n        {isDarkMode ? (\n          <>\n            {\" \"}\n            <span className=\"dark\">LIGHT</span> <img src={sun} alt=\"sun\" />{\" \"}\n          </>\n        ) : (\n          <>\n            {\" \"}\n            <span>DARK</span> <img src={moon} alt=\"moon\" />{\" \"}\n          </>\n        )}\n      </div>\n    </header>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport InputBar from \"./components/InputBar\";\nimport InfoDisplay from \"./components/InfoDisplay\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\n\n/**\n * TODO List:\n * Add error message when search fails\n * Refactor\n * Finish readme\n * Have the correct color scheme chosen for the user based on their computer\n *    preferences. I.E. `prefers-color-scheme` in CSS.\n * Add favicon\n */\n\nfunction App() {\n  // * Hooks\n  const [username, setUsername] = useState(\"octocat\");\n  // dark mode styles found in InfoDisplay.css\n  const [isDarkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    document.body.classList.toggle(\"dark\", isDarkMode);\n  }, [isDarkMode]);\n\n  return (\n    <div className=\"App\">\n      <Header isDarkMode={isDarkMode} setDarkMode={setDarkMode} />\n      <InputBar setUsername={setUsername} isDarkMode={isDarkMode} />\n      <InfoDisplay username={username} isDarkMode={isDarkMode} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}